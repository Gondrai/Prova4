module Main exposing (..)
import Html exposing (..)
import Browser
import Html exposing (..)
import Html.Events exposing (..)
import Html.Attributes exposing (..)

-- MAIN
main =
  Browser.sandbox { init = init, update = update, view = view }

-- MODEL
type alias Model = { a : String, resultado : String }

init : Model
init = Model "" ""

-- UPDATE
type Msg = A String
         | Calcular
         | Resultado String

split : String -> List String --separa os números
split = String.split ""

toint : List (Maybe Int) -> List Int --Transforma de Maybe para Int
toint = List.map fromMaybe

tomaybe : List String -> List (Maybe Int) --Transforma de String para Maybe Int
tomaybe = List.map String.toInt   

fromMaybe : Maybe Int -> Int --Faz parte da Função de transformar para String
fromMaybe maybe =
  case maybe of
    Nothing -> 0
    Just numero -> numero

last : List Int -> String --Pega apenas o último digito, favor ignorar a conta de vezes 
last lista =
    case lista of
    [] -> ""
    [x,y] -> String.fromInt x ++ String.fromInt y
    x::xs -> (last xs)
    
vdd : String -> String -> String --checar validade
vdd x y = if x == y then "Titulo de Eleitor Válido" else "Título de Eleitor Inválido"

listmult : List Int -> Int -> Int  --Calcula o primeiro DV
listmult lista n =
    case lista of
    [] -> 0
    [w,x,y,z] -> 0
    x::xs -> remainderBy 11 ((x*n + (listmult xs n+1))//11) 
    
ret : List Int -> List Int --Pega do 9° até o 11° número
ret lista = 
    case lista of
    [] -> []
    [w,x,y,z] -> [w,x,y]
    x::xs -> x::xs
    
listmult2 : List Int -> Int-> Int --Calcula o segundo DV
listmult2 lista n =  
    case lista of
    [] -> 0
    x::xs -> remainderBy 11 ((x*n + (listmult xs n+1))//11) 
    
conv : Int -> Int --O valor do resto 10 é DV é 0
conv = \x -> if x==10 then 0 else x

update : Msg -> Model -> Model
update msg model =
  case msg of
    A x1 -> { model | a = x1}
    Calcular -> {model | resultado =vdd (String.fromInt(conv(listmult(toint(tomaybe(split model.a)))2))++String.fromInt(conv(listmult2(ret(toint(tomaybe(split model.a))))7))) (last(toint(tomaybe(split model.a))))}
    Resultado result -> {model | resultado = result} 
    
-- VIEW
view : Model -> Html Msg
view model =
  div [] 
      [ h1 [] [text "Validador de Titulo Eleitoral"]
      , div []
      [p []
      [ input [ placeholder "Insira o Titulo aqui", value model.a, onInput A ] []
      , p [] [
      button [onClick Calcular] [text "Validar"]]
      , div [] [text (model.resultado)]
      ]]]
      
